{"version":3,"sources":["components/Todo.js","components/TodoList.js","redux/actions.js","redux/types.js","App.js","serviceWorker.js","redux/reducers/todos.reducer.js","redux/store.js","index.js"],"names":["Todo","date","name","deleteTodo","style","display","justifyContent","marginBottom","Header","as","Button","icon","size","onClick","bind","TodoList","todos","map","todo","fulfilled","key","setTodosAC","payload","type","connect","todoReducer","dispatch","setTodos","JSON","parse","localStorage","getItem","addTodo","push","setItem","stringify","addTodoW","filter","deleteTodoW","useState","form","setForm","useEffect","Container","marginTop","Form","Field","placeholder","onChange","e","target","value","color","Date","now","margin","Boolean","window","location","hostname","match","initialState","state","action","rootReducer","combineReducers","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46a30815.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Header, Button } from 'semantic-ui-react'\r\n\r\nconst Todo = ({ date, name, deleteTodo }) => {\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 15 }}>\r\n            <Header as=\"h4\">{name}</Header>\r\n            <Header as=\"h5\">{date}</Header>\r\n            <Button icon=\"delete\" size=\"small\" onClick={deleteTodo.bind(this, name)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react';\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({ todos, deleteTodo }) => {\r\n    return (\r\n        <div>\r\n            {todos.map(todo => <Todo date={todo.date} name={todo.name} fulfilled={todo.fulfilled} key={todo.date} deleteTodo={deleteTodo} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import { SET_TODOS, ADD_TODO } from './types';\r\n\r\nexport const setTodosAC = payload => ({ type: SET_TODOS, payload });\r\nexport const addTodoAC = payload => ({ type: ADD_TODO, payload });\r\n\r\nexport const setTodosW = () => dispatch => {\r\n    const todos = JSON.parse(localStorage.getItem('todos')) || [];\r\n    dispatch(setTodosAC(todos));\r\n}\r\n\r\nexport const addTodoW = todo => dispatch => {\r\n    const todos = JSON.parse(localStorage.getItem('todos')) || []\r\n    todos.push(todo);\r\n    localStorage.setItem('todos', JSON.stringify(todos));\r\n    dispatch(setTodosAC(todos))\r\n}\r\n\r\nexport const deleteTodoW = name => dispatch => {\r\n    let todos = JSON.parse(localStorage.getItem('todos')) || []\r\n    todos = todos.filter(todo => todo.name != name);\r\n    localStorage.setItem('todos', JSON.stringify(todos));\r\n    dispatch(setTodosAC(todos))\r\n}","export const SET_TODOS = 'SET_TODOS';\r\nexport const ADD_TODO = 'ADD_TODO';","import React, { useEffect, useState } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Container, Form, Button, Header, Popup } from 'semantic-ui-react';\nimport TodoList from './components/TodoList';\nimport { connect } from 'react-redux';\nimport { setTodosW, addTodoW, deleteTodoW } from './redux/actions';\n\nconst App = ({ todos, setTodos, addTodo, deleteTodo }) => {\n  const [form, setForm] = useState('')\n\n  useEffect(() => {\n    setTodos();\n  }, [])\n\n  const onClick = () => {\n    if (form !== '') {\n      addTodo({ name: form, date: Date.now });\n      setForm('');\n    }\n  }\n\n  const onChange = e => setForm(e.target.value);\n\n  return (\n    <Container>\n      <Header as='h1' style={{ marginTop: 15 }}>TodoList</Header>\n      <Form>\n        <Form.Field>\n          <label>Type name of todo</label>\n          <input placeholder={`Todo\\'s name`} onChange={onChange} value={form} />\n        </Form.Field>\n      </Form>\n      <Button color='blue' onClick={onClick} style={{ margin: '15px 0' }}>Add todo</Button>\n      <TodoList todos={todos} deleteTodo={deleteTodo} />\n    </Container>\n  );\n}\n\nconst mapStateToProps = ({ todoReducer }) => ({\n  todos: todoReducer.todos\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setTodos: () => dispatch(setTodosW()),\n  addTodo: todo => dispatch(addTodoW(todo)),\n  deleteTodo: name => dispatch(deleteTodoW(name))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_TODOS, ADD_TODO } from '../types';\r\n\r\nconst initialState = {\r\n    todos: []\r\n};\r\n\r\nconst todoReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TODOS:\r\n            return {\r\n                ...state,\r\n                todos: action.payload\r\n            }\r\n        case ADD_TODO:\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos, action.payload]\r\n            }\r\n        default: return state\r\n    };\r\n};\r\n\r\nexport default todoReducer;","import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\r\nimport todoReducer from './reducers/todos.reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({\r\n    todoReducer\r\n});\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\n\r\nconst enhancer = composeEnhancers(\r\n    applyMiddleware(thunk)\r\n);\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    enhancer\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n    <React.StrictMode>\n       <Provider store={store}>\n      <App />\n    </Provider>\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}